{"version":3,"sources":["App.js","components/Recipe.js","serviceWorker.js","index.js"],"names":["API_KEY","App","state","recipes","getRecipe","_callee","e","recipe","api_call","data","regenerator_default","a","wrap","_context","prev","next","target","elements","recipeName","value","preventDefault","fetch","concat","sent","json","_this","setState","stop","this","console","log","react_default","createElement","className","Component","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAIMA,EAAU,mCAwDDC,6MApDfC,MAAQ,CACNC,QAAS,MAETC,gDAAY,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACJR,EAA+C,KAArCD,EAAEU,OAAOC,SAASC,WAAWC,MAAa,UAAYb,EAAEU,OAAOC,SAASC,WAAWC,MAEnGb,EAAEc,iBAHQP,EAAAE,KAAA,EAKaM,MAAK,4CAAAC,OAA6CtB,EAA7C,OAAAsB,OAA0Df,EAA1D,oBALlB,cAKJC,EALIK,EAAAU,KAAAV,EAAAE,KAAA,EAMKP,EAASgB,OANd,OAMRf,EANQI,EAAAU,KAOVE,EAAKC,SAAS,CAACvB,QAAQM,EAAKN,UAPlB,wBAAAU,EAAAc,SAAAtB,EAAAuB,kJAWdC,QAAQC,IAAI,4CAyBR,OACEC,EAAApB,EAAAqB,cAAA,OAAKC,UAAU,OACdF,EAAApB,EAAAqB,cAAA,UAAQC,UAAU,cACfF,EAAApB,EAAAqB,cAAA,MAAIC,UAAU,aAAd,0BA5CQC,qBCJZlC,EAAU,mCACKmC,IAAMD,UCSPE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOX,EAAApB,EAAAqB,cAACW,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10cb60d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst API_KEY = '983e1f6038b33c4c960f5ead47996eab';\n\nclass App extends Component {\n\nstate = {\n  recipes: []\n}\n  getRecipe = async (e) =>{\n    const recipe =  e.target.elements.recipeName.value===\"\" ? \"chicken\" : e.target.elements.recipeName.value;\n\t\n    e.preventDefault();\n    \n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipe}&page=2&count=5`);\nconst data = await api_call.json();\n    this.setState({recipes:data.recipes});\n\n  }\n  componentDidMount() {\nconsole.log('im here');\n  }\n//  async componentDidMount() {\n\n// //     console.log(data);\n//    const JSONData = localStorage.getItem(\"recipes\");\n//    if(JSONData){\n//     console.log(JSONData);\n//    const recipes = JSON.parse(JSONData);\n//    this.setState({recipes});\n//    }\n//    else {\n//        const recipe = \"chicken\" ;\n//      \tconsole.log('Local storage is blank');\n            \n//          const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipe}&page=2&count=5`);\n//      const data = await api_call.json();\n//          this.setState({recipes:data.recipes});\n//    }\n//   }\n//   componentDidUpdate =() =>{\n//     const recipes = JSON.stringify(this.state.recipes);\n//     localStorage.setItem(\"recipes\", recipes);\n//   }\n  render() {\n    return (\n      <div className=\"App\">\n       <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n       {/* <Form getRecipe={this.getRecipe}></Form>\n      <Recipes recipes={this.state.recipes}></Recipes>  */}\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nconst API_KEY = '983e1f6038b33c4c960f5ead47996eab';\r\nclass Recipe extends React.Component{\r\n    state = {\r\n        activeRecipes: []\r\n      }\r\n        componentDidMount = async () =>{\r\n            \r\n            const recipeName  = this.props.location.state.recipe;\r\n            const recipe_call = await fetch(`http://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}`);\r\n             const data = await recipe_call.json();\r\n           this.setState({activeRecipes:data.recipes[0]});\r\n    \r\n         }\r\n\r\n    render(){\r\n        const recipe = this.state.activeRecipes;\r\n        \r\n        return (\r\n        <div className=\"container\">\r\n        \r\n            {this.state.activeRecipes.length !==0 &&\r\n            <div className=\"active-recipe\">\r\n                <img className=\"active-recipe__img\"  src={recipe.image_url} alt={recipe.title} />\r\n                <h3 className=\"active-recipe__text\"> {recipe.title}</h3>\r\n                <h4 className=\"active-recipe__publisher\">Publisher <span>{recipe.publisher}</span></h4>\r\n                <p className=\"active-recipe__website\">Website: \r\n                    <span>\r\n                        <a href={recipe.publisher_url}>{recipe.publisher_url}</a></span></p>\r\n                <button className=\"active-recipes__button\">\r\n                <Link to=\"/\">Go Home</Link>\r\n                </button>\r\n            </div>\r\n            } \r\n        </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Recipe;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n//import { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
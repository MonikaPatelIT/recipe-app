{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","autoFocus","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","lenght","concat","substring","publisher","Link","to","pathname","state","API_KEY","App","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","recipeName","value","console","log","preventDefault","fetch","sent","json","_this","setState","stop","this","componentDidUpdate","JSON","stringify","localStorage","setItem","JSONData","getItem","parse","components_Form","components_Recipes","Component","Recipe","activeRecipes","componentDidMount","recipe_call","location","length","href","publisher_url","React","Router","BrowserRouter","basename","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSASeA,EAPF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,UAAWC,MAAO,CAACC,aAAa,QAClDN,EAAAC,EAAAC,cAAA,SAAOK,UAAU,cAAcC,KAAK,OAAOC,KAAK,aAAaC,WAAW,IACxEV,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASD,UAAU,gBAAhC,oBCkCOI,EArCC,SAAAZ,GAAK,OAEjBC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OAAf,oBAGER,EAAMa,QAAQC,IAAI,SAAAC,GAEV,OACEd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WAAWQ,IAAKD,EAAOE,UAAWX,MAAO,CAACC,aAAa,QACtEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBAAmBU,IAAKH,EAAOI,UAAWC,IAAKL,EAAOM,QACrEpB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACfP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,kBACbO,EAAOM,MAAMC,OAAS,GAAtB,GAAAC,OAA8BR,EAAOM,OAArC,GAAAE,OAAkDR,EAAOM,MAAMG,UAAU,EAAE,MAC5EvB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,qBAAb,cAA4CP,EAAAC,EAAAC,cAAA,YACvCY,EAAOU,WADZ,KAEIxB,EAAAC,EAAAC,cAAA,UAAQK,UAAU,mBAClBP,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAI,CAACC,SAAQ,WAAAL,OAAYR,EAAOE,WACtCY,MAAQ,CAACd,OAAOA,EAAOM,SADvB,wBChBlBS,EAAU,mCAsDDC,6MAlDfF,MAAQ,CACNhB,QAAS,MAETR,gDAAY,SAAA2B,EAAOC,GAAP,IAAAlB,EAAAmB,EAAAC,EAAA,OAAAC,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACJzB,EAA+C,KAArCkB,EAAEQ,OAAOC,SAASC,WAAWC,MAAa,UAAYX,EAAEQ,OAAOC,SAASC,WAAWC,MACtGC,QAAQC,IAAI/B,GACTkB,EAAEc,iBAHQT,EAAAE,KAAA,EAKaQ,MAAK,4CAAAzB,OAA6CO,EAA7C,OAAAP,OAA0DR,EAA1D,oBALlB,cAKJmB,EALII,EAAAW,KAAAX,EAAAE,KAAA,EAMKN,EAASgB,OANd,OAMRf,EANQG,EAAAW,KAOVE,EAAKC,SAAS,CAACvC,QAAQsB,EAAKtB,UAPlB,yBAAAyB,EAAAe,SAAArB,EAAAsB,iEA6BZC,mBAAoB,WAClB,IAAM1C,EAAU2C,KAAKC,UAAUN,EAAKtB,MAAMhB,SAC1C6C,aAAaC,QAAQ,UAAW9C,gNAjB3B+C,EAAWF,aAAaG,QAAQ,4BAErChB,QAAQC,IAAIc,GACP/C,EAAU2C,KAAKM,MAAMF,GAC3BN,KAAKF,SAAS,CAACvC,yCAGI,UAChBgC,QAAQC,IAAI,oCAEcE,MAAK,4CAAAzB,OAA6CO,EAA7C,OAAAP,OAHf,UAGe,mCAAtBW,mBACSA,EAASgB,eAAtBf,SACFmB,KAAKF,SAAS,CAACvC,QAAQsB,EAAKtB,8IAQjC,OACEZ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACdP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cACfP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,aAAd,kBAEHP,EAAAC,EAAAC,cAAC4D,EAAD,CAAM1D,UAAWiD,KAAKjD,YACvBJ,EAAAC,EAAAC,cAAC6D,EAAD,CAASnD,QAASyC,KAAKzB,MAAMhB,kBA7CjBoD,aCJZnC,EAAU,mCAsCDoC,6MApCXrC,MAAQ,CACJsC,cAAe,MAEfC,uCAAoB,SAAApC,IAAA,IAAAW,EAAA0B,EAAAlC,EAAA,OAAAC,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEVG,EAAcQ,EAAKnD,MAAMsE,SAASzC,MAAMd,OAF9BuB,EAAAE,KAAA,EAGUQ,MAAK,4CAAAzB,OAA6CO,EAA7C,OAAAP,OAA0DoB,IAHzE,cAGV0B,EAHU/B,EAAAW,KAAAX,EAAAE,KAAA,EAII6B,EAAYnB,OAJhB,OAITf,EAJSG,EAAAW,KAKjBE,EAAKC,SAAS,CAACe,cAAchC,EAAKtB,QAAQ,KALzB,wBAAAyB,EAAAe,SAAArB,EAAAsB,iFAUpB,IAAMvC,EAASuC,KAAKzB,MAAMsC,cAE1B,OACAlE,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAEyB,IAAnC8C,KAAKzB,MAAMsC,cAAcI,QAC1BtE,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBAAsBU,IAAKH,EAAOI,UAAWC,IAAKL,EAAOM,QACxEpB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,uBAAd,IAAsCO,EAAOM,OAC7CpB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,4BAAd,aAAmDP,EAAAC,EAAAC,cAAA,YAAOY,EAAOU,YACjExB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,0BAAb,WACIP,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,KAAGqE,KAAMzD,EAAO0D,eAAgB1D,EAAO0D,iBAC/CxE,EAAAC,EAAAC,cAAA,UAAQK,UAAU,0BAClBP,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,KAAT,qBA5BK+C,IAAMT,WCWZU,EAVD,kBACV1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAeC,SAAS,KACxB5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACA7E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWlD,EAAKmD,OAAK,IACrCjF,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWf,OCIrBiB,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCTNC,IAASC,OAAOvF,EAAAC,EAAAC,cAACsF,EAAD,MAAYC,SAASC,eAAe,SDwH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.83d04e05.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props =>(\r\n    <form onSubmit={props.getRecipe} style={{marginBottom:\"2em\"}}>\r\n        <input className='form__input' type=\"text\" name=\"recipeName\" autoFocus={true} />\r\n        <button type=\"submit\" className='form__button'>Search</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nconst Recipes = props =>(\r\n\r\n    <div className=\"container\">\r\n    <div className=\"row\" >\r\n    \r\n\t\tif(props.recipes){\r\n      props.recipes.map(recipe=> {\r\n           \r\n              return( \r\n                <div className=\"col-md-4\" key={recipe.recipe_id} style={{marginBottom:\"2em\"}}>\r\n                <div className=\"recipes__box\">\r\n                    <img className=\"recipes__box-img\" src={recipe.image_url} alt={recipe.title}/>\r\n                    <div className=\"recipes__text\">\r\n                    <h5 className=\"recipes__title\">\r\n                    {recipe.title.lenght < 20 ? `${recipe.title}` : `${recipe.title.substring(0,25)}`}</h5>\r\n                    <p className=\"recipes__subtitle\">Publisher: <span>\r\n                        {recipe.publisher}</span> </p>\r\n                        <button className=\"recipes_buttons\">\r\n                        <Link to={{pathname:`/recipe/${recipe.recipe_id}`,\r\n                        state : {recipe:recipe.title}    \r\n                    }} \r\n                         >View Recipe</Link>\r\n                        \r\n                        </button>\r\n                    </div>\r\n                    \r\n                </div>              \r\n               </div>)\r\n      }\r\n\t\t\r\n      )\r\n    } \r\n    </div>\r\n    </div>\r\n      \r\n);\r\n\r\nexport default Recipes;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst API_KEY = '983e1f6038b33c4c960f5ead47996eab';\n\nclass App extends Component {\n\nstate = {\n  recipes: []\n}\n  getRecipe = async (e) =>{\n    const recipe =  e.target.elements.recipeName.value===\"\" ? \"chicken\" : e.target.elements.recipeName.value;\n\tconsole.log(recipe);\n    e.preventDefault();\n    \n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipe}&page=2&count=5`);\nconst data = await api_call.json();\n    this.setState({recipes:data.recipes});\n\n  }\n  \n async componentDidMount() {\n\n//     console.log(data);\n   const JSONData = localStorage.getItem(\"recipes\");\n   if(JSONData){\n    console.log(JSONData);\n   const recipes = JSON.parse(JSONData);\n   this.setState({recipes});\n   }\n   else {\n       const recipe = \"chicken\" ;\n     \tconsole.log('Local storage is blank');\n            \n         const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipe}&page=2&count=5`);\n     const data = await api_call.json();\n         this.setState({recipes:data.recipes});\n   }\n  }\n  componentDidUpdate =() =>{\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n       <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n       <Form getRecipe={this.getRecipe}></Form>\n      <Recipes recipes={this.state.recipes}></Recipes> \n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nconst API_KEY = '983e1f6038b33c4c960f5ead47996eab';\r\nclass Recipe extends React.Component{\r\n    state = {\r\n        activeRecipes: []\r\n      }\r\n        componentDidMount = async () =>{\r\n            \r\n            const recipeName  = this.props.location.state.recipe;\r\n            const recipe_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}`);\r\n             const data = await recipe_call.json();\r\n           this.setState({activeRecipes:data.recipes[0]});\r\n    \r\n         }\r\n\r\n    render(){\r\n        const recipe = this.state.activeRecipes;\r\n        \r\n        return (\r\n        <div className=\"container\">\r\n        \r\n            {this.state.activeRecipes.length !==0 &&\r\n            <div className=\"active-recipe\">\r\n                <img className=\"active-recipe__img\"  src={recipe.image_url} alt={recipe.title} />\r\n                <h3 className=\"active-recipe__text\"> {recipe.title}</h3>\r\n                <h4 className=\"active-recipe__publisher\">Publisher <span>{recipe.publisher}</span></h4>\r\n                <p className=\"active-recipe__website\">Website: \r\n                    <span>\r\n                        <a href={recipe.publisher_url}>{recipe.publisher_url}</a></span></p>\r\n                <button className=\"active-recipes__button\">\r\n                <Link to=\"/\">Go Home</Link>\r\n                </button>\r\n            </div>\r\n            } \r\n        </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport App from '../App';\r\nimport Recipe from './Recipe';\r\nconst Router =() =>(\r\n    <BrowserRouter basename=\"/\">\r\n    <Switch>\r\n    <Route path=\"/\" component={App} exact />\r\n    <Route path=\"/recipe/:id\" component={Recipe}  />\r\n    \r\n    </Switch>\r\n    </BrowserRouter>\r\n)\r\n\r\nexport default Router;\r\n     \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n//import { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}